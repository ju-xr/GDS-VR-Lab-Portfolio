using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StartToggleDicModel
{
    [RealtimeProperty(1, true)]
    private uint _gameIndex;
    [RealtimeProperty(2, true)]
    bool _gameStart;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class StartToggleDicModel : RealtimeModel {
    public uint gameIndex {
        get {
            return _gameIndexProperty.value;
        }
        set {
            if (_gameIndexProperty.value == value) return;
            _gameIndexProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public bool gameStart {
        get {
            return _gameStartProperty.value;
        }
        set {
            if (_gameStartProperty.value == value) return;
            _gameStartProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public enum PropertyID : uint {
        GameIndex = 1,
        GameStart = 2,
    }
    
    #region Properties
    
    private ReliableProperty<uint> _gameIndexProperty;
    
    private ReliableProperty<bool> _gameStartProperty;
    
    #endregion
    
    public StartToggleDicModel() : base(null) {
        _gameIndexProperty = new ReliableProperty<uint>(1, _gameIndex);
        _gameStartProperty = new ReliableProperty<bool>(2, _gameStart);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _gameIndexProperty.UnsubscribeCallback();
        _gameStartProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _gameIndexProperty.WriteLength(context);
        length += _gameStartProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _gameIndexProperty.Write(stream, context);
        writes |= _gameStartProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.GameIndex: {
                    changed = _gameIndexProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.GameStart: {
                    changed = _gameStartProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _gameIndex = gameIndex;
        _gameStart = gameStart;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
